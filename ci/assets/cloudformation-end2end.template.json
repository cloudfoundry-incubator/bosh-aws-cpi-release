{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Template for creating BOSH AWS infrastructure for concourse ci.",
  "Parameters" : {
    "KeyPairName" : {
      "Description" : "Name of an existing EC2 KeyPair",
      "Type" : "String",
      "Default" : "bats",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[-_ a-zA-Z0-9]*",
      "ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores."
    }
   },
  "Mappings": {
    "IPConfigurations": {
      "VPC": {
        "CIDR": "10.0.0.0/16"
      },
      "End2EndPublic": {
        "CIDR": "10.0.3.0/24",
        "Gateway": "10.0.3.1",
        "DirectorPrivate": "10.0.3.6"
      },
      "End2EndPrivate": {
        "CIDR": "10.0.4.0/24"
      }
    },
    "Region2Principal": {
      "us-east-1": {
        "EC2Principal": "ec2.amazonaws.com",
        "OpsWorksPrincipal": "opsworks.amazonaws.com"
      },
      "us-west-2": {
        "EC2Principal": "ec2.amazonaws.com",
        "OpsWorksPrincipal": "opsworks.amazonaws.com"
      },
      "us-west-1": {
        "EC2Principal": "ec2.amazonaws.com",
        "OpsWorksPrincipal": "opsworks.amazonaws.com"
      },
      "eu-west-1": {
        "EC2Principal": "ec2.amazonaws.com",
        "OpsWorksPrincipal": "opsworks.amazonaws.com"
      },
      "ap-southeast-1": {
        "EC2Principal": "ec2.amazonaws.com",
        "OpsWorksPrincipal": "opsworks.amazonaws.com"
      },
      "ap-northeast-1": {
        "EC2Principal": "ec2.amazonaws.com",
        "OpsWorksPrincipal": "opsworks.amazonaws.com"
      },
      "ap-northeast-2": {
        "EC2Principal": "ec2.amazonaws.com",
        "OpsWorksPrincipal": "opsworks.amazonaws.com"
      },
      "ap-southeast-2": {
        "EC2Principal": "ec2.amazonaws.com",
        "OpsWorksPrincipal": "opsworks.amazonaws.com"
      },
      "sa-east-1": {
        "EC2Principal": "ec2.amazonaws.com",
        "OpsWorksPrincipal": "opsworks.amazonaws.com"
      },
      "cn-north-1": {
        "EC2Principal": "ec2.amazonaws.com.cn",
        "OpsWorksPrincipal": "opsworks.amazonaws.com.cn"
      },
      "eu-central-1": {
        "EC2Principal": "ec2.amazonaws.com",
        "OpsWorksPrincipal": "opsworks.amazonaws.com"
      }
    },
    "NatRegionMap" : {
      "us-east-1"      : { "AMI" : "ami-184dc970" },
      "us-west-1"      : { "AMI" : "ami-a98396ec" },
      "us-west-2"      : { "AMI" : "ami-290f4119" },
      "eu-west-1"      : { "AMI" : "ami-14913f63" },
      "eu-central-1"   : { "AMI" : "ami-ae380eb3" },
      "sa-east-1"      : { "AMI" : "ami-8122969c" },
      "ap-southeast-1" : { "AMI" : "ami-6aa38238" },
      "ap-southeast-2" : { "AMI" : "ami-893f53b3" },
      "ap-northeast-1" : { "AMI" : "ami-27d6e626" },
      "ap-northeast-2" : { "AMI" : "ami-4118d72f" },
      "cn-north-1"     : { "AMI" : "ami-b23fad8b" }
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Fn::FindInMap": [
            "IPConfigurations",
            "VPC",
            "CIDR"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "end2end-vpc"
          }
        ]
      }
    },
    "End2EndPublicSubnet": {
      "DependsOn": [
        "VPC"
      ],
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Fn::FindInMap": [
            "IPConfigurations",
            "End2EndPublic",
            "CIDR"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "end2end-public"
          }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "end2end-gateway"
          }
        ]
      }
    },
    "AttachGateway": {
      "DependsOn": [
        "VPC",
        "InternetGateway"
      ],
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicRouteTable": {
      "DependsOn": [
        "VPC"
      ],
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "end2end-rt"
          }
        ]
      }
    },
    "PublicRoute": {
      "DependsOn": [
        "PublicRouteTable",
        "AttachGateway"
      ],
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "End2EndPublicSubnetRouteTableAssociation": {
      "DependsOn": [
        "End2EndPublicSubnet",
        "PublicRouteTable"
      ],
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "End2EndPublicSubnet"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },
    "NetworkAcl": {
      "DependsOn": [
        "VPC"
      ],
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "end2end-ACL"
          }
        ]
      }
    },
    "InBoundAllTrafficAclEntry": {
      "DependsOn": [
        "NetworkAcl"
      ],
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "-1",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0"
      }
    },
    "OutBoundAllTrafficAclEntry": {
      "DependsOn": [
        "NetworkAcl"
      ],
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "-1",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0"
      }
    },
    "End2EndPublicSubnetNetworkAclAssociation": {
      "DependsOn": [
        "End2EndPublicSubnet",
        "NetworkAcl"
      ],
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "End2EndPublicSubnet"
        },
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        }
      }
    },
    "End2EndPrivateSubnet": {
      "DependsOn": [
        "VPC",
        "End2EndPublicSubnet"
      ],
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone" : {
          "Fn::GetAtt": [
            "End2EndPublicSubnet",
            "AvailabilityZone"
          ]
        },
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Fn::FindInMap": [
            "IPConfigurations",
            "End2EndPrivate",
            "CIDR"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "end2end-private"
          }
        ]
      }
    },
    "PrivateRouteTable": {
      "DependsOn": [
        "VPC"
      ],
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "end2end-private-rt"
          }
        ]
      }
    },
    "End2EndPrivateSubnetRouteTableAssociation": {
      "DependsOn": [
        "End2EndPrivateSubnet",
        "PrivateRouteTable"
      ],
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "End2EndPrivateSubnet"
        },
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        }
      }
    },
    "CISecurityGroup": {
      "DependsOn": [
        "VPC"
      ],
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "GroupDescription": "allows local and concourse traffic",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "-1",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "ci"
          }
        ]
      }
    },
    "End2EndELB": {
      "DependsOn": [
        "End2EndPrivateSubnet",
        "CISecurityGroup"
      ],
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Listeners": [
          {
            "InstancePort": 80,
            "LoadBalancerPort": 80,
            "Protocol": "HTTP"
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "CISecurityGroup"
          }
        ],
        "Subnets": [
          {
            "Ref": "End2EndPrivateSubnet"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "bosh-aws-cpi-e2e-elb"
          }
        ]
      }
    },
    "End2EndIPAddress1": {
      "DependsOn": [
        "AttachGateway"
      ],
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "End2EndIPAddress2": {
      "DependsOn": [
        "AttachGateway"
      ],
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "End2EndS3Bucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Delete",
      "Properties": {
        "AccessControl": "Private",
        "Tags": [
          {
            "Key": "Name",
            "Value": "end2end-blobstore-bucket"
          }
        ]
      }
    },
    "RootRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": { "Fn::FindInMap": [ "Region2Principal", { "Ref": "AWS::Region"}, "EC2Principal"]}
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "EC2Policy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": "ec2:*",
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "elasticloadbalancing:*",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "cloudwatch:*",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "autoscaling:*",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "S3Policy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "S3Policy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:*"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "RootRole"
          }
        ]
      }
    },
    "IAMPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "IAMPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "iam:PassRole"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "RootRole"
          }
        ]
      }
    },
    "InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "RootRole"
          }
        ]
      }
    },
    "NAT" : {
      "DependsOn" : [
        "End2EndPublicSubnet",
        "CISecurityGroup"
      ],
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "InstanceType" : "t2.micro",
        "KeyName"  : { "Ref" : "KeyPairName" },
        "SourceDestCheck" : "false",
        "ImageId" : { "Fn::FindInMap" : [ "NatRegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
        "NetworkInterfaces" : [{
          "GroupSet"                 : [{ "Ref" : "CISecurityGroup" }],
          "AssociatePublicIpAddress" : "true",
          "DeviceIndex"              : "0",
          "DeleteOnTermination"      : "true",
          "SubnetId"                 : { "Ref" : "End2EndPublicSubnet" }
        }],
        "Tags" : [
          { "Key" : "Name", "Value" : "NAT" }
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash\n",
          "yum update -y && yum install -y yum-cron && chkconfig yum-cron on"
        ]]}}
      }
    },
    "NATIPAssignment" : {
      "Type": "AWS::EC2::EIPAssociation",
      "Properties": {
        "EIP": {
          "Ref": "End2EndIPAddress2"
        },
        "InstanceId": {
          "Ref": "NAT"
        }
      }
    },
    "PrivateRoute": {
      "DependsOn": [
        "PrivateRouteTable",
        "NAT"
      ],
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": {
          "Ref": "NAT"
        }
      }
    }
  },
  "Outputs": {
    "VPCID": { "Value": { "Ref": "VPC"}},
    "End2EndSecurityGroupID": { "Value": { "Ref": "CISecurityGroup"}},
    "End2EndELB": { "Value": { "Ref": "End2EndELB" }},
    "End2EndDirectorEIP": { "Value": { "Ref": "End2EndIPAddress1"}},
    "End2EndSubnetID": { "Value": { "Ref": "End2EndPublicSubnet"}},
    "End2EndDynamicSubnetID": { "Value": { "Ref": "End2EndPrivateSubnet"}},
    "End2EndAvailabilityZone": { "Value": { "Fn::GetAtt": [ "End2EndPublicSubnet", "AvailabilityZone"]}},
    "End2EndCIDR": { "Value": { "Fn::FindInMap": [ "IPConfigurations", "End2EndPublic", "CIDR"]}},
    "End2EndGateway": { "Value": { "Fn::FindInMap": [ "IPConfigurations", "End2EndPublic", "Gateway"]}},
    "End2EndDirectorStaticIP": { "Value": { "Fn::FindInMap": [ "IPConfigurations", "End2EndPublic", "DirectorPrivate"]}},
    "End2EndIAMInstanceProfile": { "Value": { "Ref": "InstanceProfile"}},
    "End2EndBlobstoreBucketName": { "Value": { "Ref": "End2EndS3Bucket"}}
  }
}
